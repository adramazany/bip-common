package bip.etl;import java.sql.Connection;import java.sql.Statement;import java.util.Set;import aip.util.AIPUtil;import aip.util.DateConvert;import aip.util.NVL;public class ProcessLogDefault implements ProcessLog {	private String logInsertSql = "insert into etl_log(id,username,logdate,logtime,tablename,loglevel,logdesc,tableid)" +			"values(seq_etl_log.nextval,':username',':logdate',':logtime',':tablename',':loglevel',':logdesc',':tableid')";	private String logUpdateSql = "update etl_log set ISSOLVED=1,lastretryuser=':lastretryuser'" +	",lastretrydate=':lastretrydate',lastretrytime=':lastretrytime'" +	" where tablename=':tablename' and tableid=':tableid'";		private String logCreateSql = "create sequence seq_etl_log;"			+ "CREATE TABLE etl_log(ID integer,USERNAME VARCHAR(50),LOGDATE CHAR(10),LOGTIME CHAR(8),TABLENAME VARCHAR(35),LOGLEVEL VARCHAR(10),LOGDESC VARCHAR(4000),TABLEID VARCHAR(20),LASTRETRYUSER VARCHAR(50),LASTRETRYDATE CHAR(10),LASTRETRYTIME CHAR(8),ISSOLVED NUMBER(1,0),PRIMARY KEY (ID));"			+ "CREATE UNIQUE INDEX pk_etl_log ON etl_log (ID) ;"			+ "create index ix_etl_log_tablenameid on etl_log(tablename,tableid);";	private static boolean logTableExistChecked = false;		public ProcessLogDefault(String logTableName){		logInsertSql = AIPUtil.replaceAllString(logInsertSql, "etl_log", logTableName);		logUpdateSql = AIPUtil.replaceAllString(logUpdateSql, "etl_log", logTableName);		logCreateSql = AIPUtil.replaceAllString(logUpdateSql, "etl_log", logTableName);	}		public StringBuffer getLogExceptionSql(ProcessParam param, String logLevel){		StringBuffer sql = new StringBuffer(logInsertSql);		String username= param.getWebUserParam()!=null?param.getWebUserParam().getRemoteUser():"";		AIPUtil.replaceString(sql, ":username", username);		AIPUtil.replaceString(sql, ":logdate", DateConvert.getTodayJalali());		AIPUtil.replaceString(sql, ":logtime", DateConvert.getTime());		AIPUtil.replaceString(sql, ":tablename", param.getTablename());		AIPUtil.replaceString(sql, ":loglevel", logLevel);		return sql;			}	public void logStartProcess(Connection cndest, String maxid, int totalcount, ProcessParam param) {		checkLogTableExists(cndest);				StringBuffer sql = getLogExceptionSql(param,LOG_INFO);		AIPUtil.replaceString(sql, ":tableid", "");				StringBuffer logdesc = new StringBuffer("تجمیع اطلاعات");				if(!NVL.isEmpty(param.getTarikhaz())				||	 !NVL.isEmpty(param.getTarikhta())				){			logdesc.append(" ازتاریخ : ");			logdesc.append(param.getTarikhaz());			logdesc.append(" تاتاریخ : ");			logdesc.append(param.getTarikhta());/*			if(!NVL.isEmpty(param.getEdare())){				logdesc.append(" اداره : ");				logdesc.append(param.getEdare());			}*/		}else if(param.getIsfullprocess()){				logdesc.append(" (کامل) ");		}		if(param.getOtherParams().size()>0){			logdesc.append(" سایر اطلاعات : ");			Set<String> keys = param.getOtherParams().keySet();			for(String key:keys){				logdesc.append( param.getOtherParams().get(key) );				logdesc.append( ", " );			}		}		if(!NVL.isEmpty(maxid)){			logdesc.append(" بعد از شناسه : ");			logdesc.append(maxid);		}		logdesc.append(" تعداد انتقال : ");		logdesc.append(totalcount);				AIPUtil.replaceString(sql, ":logdesc", logdesc.toString());		java.sql.Statement stmt=null;		try {			stmt = cndest.createStatement();			stmt.executeUpdate(sql.toString());		} catch (Exception e) {			e.printStackTrace();		}finally{			try{				if(stmt!=null)stmt.close();			}catch(Exception e1){}		}	}	public void logException(Exception ex, Connection cndest, ProcessParam param, String tableId) {		StringBuffer sql = getLogExceptionSql(param,LOG_ERROR);		AIPUtil.replaceString(sql, ":tableid", tableId);				AIPUtil.replaceString(sql, ":logdesc", AIPUtil.getExceptionAllMessages(ex));		java.sql.Statement stmt = null;		try{			stmt = cndest.createStatement();			stmt.executeUpdate(sql.toString());		}catch(Exception e3){			e3.printStackTrace();		}finally{			try {				if(stmt!=null)stmt.close();			} catch (Exception e) {				e.printStackTrace();			}		}	}	public void logExceptionResolved(Connection cndest, ProcessParam param, String tableId) {		StringBuffer sql = new StringBuffer();		String username= param.getWebUserParam()!=null?param.getWebUserParam().getRemoteUser():"";		AIPUtil.replaceString(sql, ":lastretryuser", username);		AIPUtil.replaceString(sql, ":lastretrydate", DateConvert.getTodayJalali());		AIPUtil.replaceString(sql, ":lastretrytime", DateConvert.getTime());		AIPUtil.replaceString(sql, ":tablename", param.getTablename());		AIPUtil.replaceString(sql, ":tableid", tableId);		java.sql.Statement stmt = null;		try{			stmt = cndest.createStatement();			stmt.executeUpdate(sql.toString());		}catch(Exception e3){			e3.printStackTrace();		}finally{			try {				if(stmt!=null)stmt.close();			} catch (Exception e) {				e.printStackTrace();			}		}	}		private void checkLogTableExists(Connection cndest) {		if(!logTableExistChecked){			createLogTable(cndest);			logTableExistChecked=true;		}	}	private void createLogTable(Connection cndest){		String[] sqls = logCreateSql.split(";");		for (int i = 0; i < sqls.length; i++) {			if(!NVL.isEmpty(sqls[i])){				Statement stmt =null;				try {					stmt = cndest.createStatement();					stmt.execute(sqls[i]);				} catch (Exception e) {					e.printStackTrace();				}finally{					try {						if(stmt!=null)stmt.close();					} catch (Exception e2) {}				}			}		}	}}