package aip.orm;import java.io.Serializable;import java.sql.CallableStatement;import java.sql.Connection;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import org.hibernate.HibernateException;import org.hibernate.Query;import org.hibernate.Session;import org.hibernate.Transaction;import org.hibernate.exception.ConstraintViolationException;import org.hibernate.jdbc.ReturningWork;import org.hibernate.jdbc.Work;import aip.report.AIPReportLST;import aip.report.AIPReportParam;import aip.util.AIPConfiguration;import aip.util.AIPException;import aip.util.AIPPrintParam;import aip.util.AIPUtil;import aip.util.NVL;/** * Data access object (DAO) for domain model * @author MyEclipse Persistence Tools */public class BaseHibernateDAO implements IBaseHibernateDAO {		public Session getSession() {		return HibernateSessionFactory.getSession();	}	public Object save(Object ent,Session session) throws Exception {		Transaction tx = null;		try {			tx = session.beginTransaction();			//ent = session.merge(ent);			ent = merge(ent,session);						session.saveOrUpdate(ent);			tx.commit();		}catch(ConstraintViolationException e){			e.printStackTrace();			if (tx != null && tx.isActive())				tx.rollback();			//session.close();			throw getAIPException("اطلاعات تکراری می باشد:"+e.getMessage(),e);		} catch (Exception e) {			e.printStackTrace();			if (tx != null && tx.isActive())				tx.rollback();			//session.disconnect();			//session.close();			if (e.getCause() != null) {				throw new Exception(e.getCause());			} else {				throw new Exception("handleThis");			}		}		return ent;	}	public Object insert(Object ent,Session session) throws Exception {		Transaction tx = null;		try {			tx = session.beginTransaction();			session.save(ent);			tx.commit();		} catch (Exception e) {			e.printStackTrace();			if (tx != null && tx.isActive())				tx.rollback();			//session.disconnect();			//session.close();			if (e.getCause() != null) {				throw new Exception(e.getCause());			} else {				throw new Exception("handleThis");			}		}		return ent;	}		public Object save(Object ent) {		Transaction tx = null;		Session session = getSession();		try {			tx = session.beginTransaction();						//ent = session.merge(ent);			ent=merge(ent,session);						session.saveOrUpdate(ent);						tx.commit();		}catch(ConstraintViolationException e){			e.printStackTrace();			if (tx != null && tx.isActive())				tx.rollback();			//session.close();			throw new HibernateException("اطلاعات تکراری می باشد:"+e.getMessage(),e);		} catch (Exception e) {			e.printStackTrace();			if (tx != null && tx.isActive()){				tx.rollback();				//session.disconnect();				//session.close();			}			if (e.getCause() != null) {				throw new HibernateException(e.getCause());			} else {				throw new HibernateException("handleThis");			}		}//		session.disconnect();//		session.close();		return ent;	}			public Object get(Class clazz,Serializable id){		Session session = getSession(); 		Object ent = session.get(clazz,id);		if(ent!=null && HibernateSessionFactory.hasRefreshTypeGET()){			try {				session.refresh(ent);			} catch (Exception e) {			}		}		//		session.disconnect();//		session.close();		return ent;	}		public Object get(Session session,Class clazz,Serializable id){		Object ent = session.get(clazz,id);		if(ent!=null)session.refresh(ent);		return ent;	}		public void delete(Object ent) throws AIPException,HibernateException{		Transaction tx = null;		Session session = getSession();		try {			tx = session.beginTransaction();			session.delete(ent);			tx.commit();		}catch(ConstraintViolationException e){			e.printStackTrace();			if (tx != null && tx.isActive())				tx.rollback();			throw new AIPException("بدلیل استفاده از این رکورد در جدول دیگر حذف امکان پذیر نیست : "+e.getConstraintName());		} catch (HibernateException e) {			e.printStackTrace();			if (tx != null && tx.isActive())				tx.rollback();			throw e;			//session.disconnect();			//session.close();		}//		session.disconnect();//		session.close();	}		public void delete(Class clazz,Double id) throws AIPException{		Object ent = get(clazz, id);		delete(ent);}	public void delete(Class clazz,Integer id)  throws AIPException{		Object ent = get(clazz, id);		delete(ent);}		public Double getNewIdentity(final String table) {		System.out.println("----------------------------------------------------------------------------------------------------------");		Double identity=1.0;		//Connection cn = getSession().connection();		identity = getSession().doReturningWork(new ReturningWork<Double>() {			public Double execute(Connection cn) throws SQLException {				Double identity=1.0;				try {					CallableStatement stmt = cn.prepareCall("{call spGetTableLastID(?,?)}");					stmt.setString(1, table);					stmt.registerOutParameter(2, java.sql.Types.DOUBLE);					stmt.execute();					identity = stmt.getDouble(2);					System.out.println("BaseHibernateDAO.getNewIdentity(): sql = " + " spGetTableLastID('" + table + "')");					System.out.println("BaseHibernateDAO.getNewIdentity(): identity = " + identity);					stmt.close();				} catch (SQLException e) {					e.printStackTrace();					throw new RuntimeException("اشکال در افزایش شماره شناسه");				}				System.out.println("----------------------------------------------------------------------------------------------------------\n");				return identity;			}		});						return identity;	}	public AIPException getAIPException(String message,Throwable cause) {		getSession().close();		return new AIPException(message,cause);	}		public AIPException getAIPException(String message) {		return getAIPException(message,null);	}		public AIPException getAIPException(int aipexception_type,Throwable cause) {		AIPException ex;				if (cause != null) {			cause.printStackTrace();		}				switch(aipexception_type) {			case AIPException.AIPEX_FETCH:				ex = getAIPException("اشکال در بازیابی اطلاعات !", cause);				break;			case AIPException.AIPEX_SAVE:				ex = getAIPException("اشکال در ذخیره اطلاعات !", cause);				break;			case AIPException.AIPEX_DELETE:				ex = getAIPException("اشکال در حذف اطلاعات", cause);				break;			default:				ex = getAIPException("اشکال نامشخص:" + cause.getMessage(), cause);		}		return ex;	}		public AIPException getAIPException(int aipexception_type) {		return getAIPException(aipexception_type, null);	}	public static void main(String[] args) {		final BaseHibernateDAO dao1 = new BaseHibernateDAO();		final BaseHibernateDAO dao2 = new BaseHibernateDAO();		dao1.getNewIdentity("a");		dao2.getNewIdentity("a");		new Thread() {			@Override			public void run() {				for (int i=0;i<20;i++) {					dao1.getNewIdentity("mohammad1");				}			}		}.start();		new Thread() {			@Override			public void run() {				for (int i=0;i<20;i++) {					dao2.getNewIdentity("mohammad1");				}			}		}.start();	}				public AIPSQLQuery4Oracle getNamedQuery(String namedQuery){		return AIPSQLQuery4Oracle.getNamedQuery(getSession(), namedQuery);	}				public void list(AIPReportLST lst,AIPReportParam param, String qry_count_name, String qry_ids_name, String[] clause_names, String[] clause_values) throws AIPException{		try{  			Session session = getSession();						Query qry_count = session.getNamedQuery(qry_count_name);			for (int i = 0; i < clause_names.length; i++) {				qry_count.setString(clause_names[i], clause_values[i] );			}			List lstCountSum = qry_count.list();			if(lstCountSum.size()>0){				Object ar = lstCountSum.get(0);				lst.setTotalItems( NVL.getLng( ar ) );			}			lst.setParam(param);			Query query = session.getNamedQuery(qry_ids_name);			for (int i = 0; i < clause_names.length; i++) {				query.setString(clause_names[i], clause_values[i] );			}						List dto_ids=new ArrayList();			if(param.getPrintParam().getPrintRange()==AIPPrintParam.RANGE_PAGE_CURRENT){				dto_ids = query.setLong("firstrow", lst.getFirstRow()).setLong("lastrow", lst.getLastRow()-lst.getFirstRow()).list();			}else if(param.getPrintParam().getPrintRange()==AIPPrintParam.RANGE_PAGE_ALL){				dto_ids = query.setLong("firstrow", 0).setLong("lastrow", lst.getTotalItems()).list();			}else{				long[][] startsAndEnds=param.getPrintParam().getRequestStartsAndEnds(lst.getPageSize(), lst.getTotalItems());				for(int i=0;i<startsAndEnds.length;i++){					List ids = query.setLong("firstrow", startsAndEnds[i][0]).setLong("lastrow", startsAndEnds[i][1]-startsAndEnds[i][0]).list();					dto_ids.addAll(ids);				}			}/*			List dtos = new ArrayList<SearchsimpleDTO>();			for(int i=0;i<dto_ids.size();i++){				SearchsimpleDTO dto = (SearchsimpleDTO) this.get(session,SearchsimpleDTO.class, (Serializable)NVL.getInt(dto_ids.get(i)));				if(dto!=null){											dtos.add( dto );						dto.setCaption( aip.law.util.AIPUtil.marksContentWords(dto.getCaption(), ar_cap) );					//creditSumPage+=NVL.getLng( dto.getCredit() );					//debitSumPage+=NVL.getLng( dto.getDebit() );					//remainedSumPage+=NVL.getLng( dto.getRemained() );				}			}			lst.setRows( dtos );*/			//lst.setSumPage("creditSumPage", ""+creditSumPage,"بدهکار");			//lst.setSumPage("debitSumPage", ""+debitSumPage,"بستانکار");			//lst.setSumPage("remainedSumPage", ""+remainedSumPage,"مانده");			//lst.setParamString( getParamString(param) );		}catch (Exception e) {			e.printStackTrace();			throw new AIPException(e);		}		//return lst;	}		/*	 * list	 */	public void list(Class clazz, AIPReportLST lst, AIPReportParam param,String namedQuery_count,String namedQuery_ids,String[] args_name,Object[] args_value)throws AIPException {		String dialect = AIPConfiguration.getProperty("dialect");		dialect = dialect.toLowerCase();		if(dialect.indexOf("oracle")>-1){			list_oracle(clazz, lst, param, namedQuery_count, namedQuery_ids, args_name, args_value);		}else if(dialect.indexOf("mysql")>-1){			list_oracle(clazz, lst, param, namedQuery_count, namedQuery_ids, args_name, args_value);		}else{			throw new AIPException("Hibernate dialect not defined for BaseHibernateDAO!");		}	}	private void list_oracle(Class clazz, AIPReportLST lst, AIPReportParam param,String namedQuery_count,String namedQuery_ids,String[] args_name,Object[] args_value) throws AIPException {		try {			Session session = getSession();			Query query_count = session.getNamedQuery(namedQuery_count);			Query query_ids = session.getNamedQuery(namedQuery_count);			for (int i = 0; i < args_name.length; i++) {				query_count.setParameter(args_name[i], args_value[i]);				query_ids.setParameter(args_name[i], args_value[i]);			}						long lstCount = NVL.getLng( query_count.uniqueResult() );			lst.setTotalItems( lstCount );			lst.setParam(param);			List dto_ids = new ArrayList();			if (param.getPrintParam().getPrintRange() == AIPPrintParam.RANGE_PAGE_CURRENT) {				dto_ids = query_ids.setLong("firstrow", lst.getFirstRow()).setLong("lastrow", lst.getLastRow()).list();			} else if (param.getPrintParam().getPrintRange() == AIPPrintParam.RANGE_PAGE_ALL) {				dto_ids = query_ids.setLong("firstrow", 1).setLong("lastrow", lst.getTotalItems()).list();			} else {				long[][] startsAndEnds = param.getPrintParam().getRequestStartsAndEnds(lst.getPageSize(),lst.getTotalItems());				for (int i = 0; i < startsAndEnds.length; i++) {					List ids = query_ids.setLong("firstrow", startsAndEnds[i][0]).setLong("lastrow", startsAndEnds[i][1]).list();					dto_ids.addAll(ids);				}			}			List dtos = new ArrayList();			for (int i = 0; i < dto_ids.size(); i++) {				Object dto = this.get(session, clazz,NVL.getInt(dto_ids.get(i)));				if (dto != null) {					dtos.add(dto);				}			}			lst.setRows(dtos);		} catch (Exception e) {			e.printStackTrace();			throw new AIPException(e);		}	}	private void list_mysql(Class clazz, AIPReportLST lst, AIPReportParam param,String namedQuery_count,String namedQuery_ids,String[] args_name,Object[] args_value) throws AIPException {		try {			Session session = getSession();			Query query_count = session.getNamedQuery(namedQuery_count);			Query query_ids = session.getNamedQuery(namedQuery_count);			for (int i = 0; i < args_name.length; i++) {				query_count.setParameter(args_name[i], args_value[i]);				query_ids.setParameter(args_name[i], args_value[i]);			}						long lstCount = NVL.getLng( query_count.uniqueResult() );			lst.setTotalItems( lstCount );			lst.setParam(param);			List dto_ids = new ArrayList();			if (param.getPrintParam().getPrintRange() == AIPPrintParam.RANGE_PAGE_CURRENT) {				dto_ids = query_ids.setLong("firstrow", lst.getFirstRow()).setLong("pagesize", lst.getPageSize()).list();			} else if (param.getPrintParam().getPrintRange() == AIPPrintParam.RANGE_PAGE_ALL) {				dto_ids = query_ids.setLong("firstrow", 1).setLong("pagesize", lst.getTotalItems()).list();			} else {				long[][] startsAndEnds = param.getPrintParam().getRequestStartsAndEnds(lst.getPageSize(),lst.getTotalItems());				for (int i = 0; i < startsAndEnds.length; i++) {					List ids = query_ids.setLong("firstrow", startsAndEnds[i][0]).setLong("pagesize", (startsAndEnds[i][1]-startsAndEnds[i][0]+1)).list();					dto_ids.addAll(ids);				}			}			List dtos = new ArrayList();			for (int i = 0; i < dto_ids.size(); i++) {				Object dto = this.get(session, clazz,NVL.getInt(dto_ids.get(i)));				if (dto != null) {					dtos.add(dto);				}			}			lst.setRows(dtos);		} catch (Exception e) {			e.printStackTrace();			throw new AIPException(e);		}	}		public void deleteNoTran(Object ent, Session session) {		try {			session.delete(ent);		} catch (Exception ex) {			Transaction tx = session.getTransaction();			if (tx != null && tx.isActive())				tx.rollback();			// session.flush();			//session.close();			throw new HibernateException(ex);		}	}	public void deleteGetBeforeNoTran(Class clazz, Serializable id,			Session session) {		Object ent = session.get(clazz, id);		deleteNoTran(ent, session);	}	public void delete(Class clazz, Serializable id)throws AIPException {		Object ent = this.get(clazz, id);		delete(ent);	}		public void deleteByCondition(final Class clazz, String whereClause) {		Transaction tx = null;		Session session = getSession();		try {			tx = session.beginTransaction();			String queryString = "delete " + clazz.getName() + " where "					+ whereClause;			Query queryObject = session.createQuery(queryString);			queryObject.executeUpdate();			tx.commit();		} catch (Exception e) {			// e.printStackTrace();			if (tx != null && tx.isActive())				tx.rollback();			// session.flush();			//session.close();			throw new HibernateException(e);		}	}	public void deleteByConditionNoTran(final Class clazz, String whereClause,			Session session) {		try {			String queryString = "delete " + clazz.getName() + " where "					+ whereClause;			Query queryObject = session.createQuery(queryString);			queryObject.executeUpdate();		} catch (Exception e) {			// e.printStackTrace();			Transaction tx = session.getTransaction();			if (tx != null && tx.isActive())				tx.rollback();			throw new HibernateException(e);		}	}	public void deleteByCondition(final Class clazz, String propertyName,Object value) {		deleteByCondition(clazz, propertyName + "= " + value);	}	public void deleteSelectedIds(Class clazz, String selectedIds) {		String[] ids = AIPUtil.splitSelectedIds(selectedIds, ",");		Transaction tx = null;		Session session = getSession();		try {			tx = session.beginTransaction();			for (int i = 0; i < ids.length; i++) {				deleteGetBeforeNoTran(clazz, new Integer(ids[i]), session);			}			tx.commit();		} catch (Exception e) {			if (tx != null && tx.isActive())				tx.rollback();			// session.flush();			//session.close();			throw new HibernateException(e);		}	}		public Object saveNoTran(Object ent, Session session)			throws HibernateException {		// it may be throw exception when ent is new then you should check		// Identity field that should be null NOT ZERO		// because : when receiving data from web it create new ENT and it does		// not match with cached ENT in hibernate and it cause exception already		// exist object//		ent = merge(ent,session);//		Object o = new Object();  //		o = session.merge(ent);		ent = merge(ent, session);				// because : save only insert and we need update when id is exists		session.saveOrUpdate(ent);		//session.refresh(o);		// because : receiving null for id in web after adding merge clause		// ent=session.get(ent.getClass(),session.getIdentifier(ent));		// session.refresh(ent);		return ent;	}	private Object merge(Object ent, Session session) {//		if(session.getIdentifier(ent)!=null)		{			ent = session.merge(ent);		}		return ent;	}		}